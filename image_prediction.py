# -*- coding: utf-8 -*-
"""Image Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1k0e7270MuXTvvqYHrTbRFHeiXMGiyyP6
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import os

!wget https://www.dropbox.com/scl/fi/9rpuyozcm7vdv0m1l0y7z/PokemonDataset.zip?rlkey=pnuu2mc5b4s85p12w7nm2umcr&dl=0 -O data

! unzip PokemonDataset.zip?rlkey=pnuu2mc5b4s85p12w7nm2umcr -d "images/"



classes = os.listdir("images/Train")
classes

print("Training Data:")
for f in classes:
  path = "images/Train/" + f
  print(f"{f} - {len(os.listdir(path))}")

print("Test Data:")
for f in classes:
  path = "images/Test/" + f
  print(f"{f} - {len(os.listdir(path))}")

# Data Loading

!pip install keras_preprocessing

from keras_preprocessing  import image

# path = "images/Train/Pikachu/300.jpg"
# img = image.load_img(path, target_size=(100,100))
# img = image.img_to_array(img)
# #img
# img.shape

train_data = [] # X
train_labels = [] #Y

for category in classes:
  folder = f"images/Train/{category}"
  for img_name in os.listdir(folder):
    img_path = f"{folder}/{img_name}"

    img = image.load_img(img_path, target_size = (100,100))
    img = image.img_to_array(img)
    train_data.append(img)
    train_labels.append(category)

len(train_data)

len(train_labels)

"""Given a pokemon image, detect the image belongs to which of the following pokemon:"""



"""**Data Preprocessing**"""

train_data = np.array(train_data)
train_labels = np.array(train_labels)

train_data.shape

train_labels.shape

train_data = train_data.reshape(len(train_data), 30000)
train_data.shape

#train_labels

category2label = {'Pikachu':0, 'Charmander':1, 'Bulbasaur':2}
label2category = {0 : 'Pikachu', 1 :'Charmander', 2 :'Bulbasaur'}

train_labels = np.array([category2label[label] for label in train_labels])
# [category2label[label] for label in train_labels]
train_labels

train_labels.shape

from keras.utils import to_categorical

train_labels = to_categorical(train_labels)

train_labels.shape

train_labels[:5]

train_labels[-5:]



"""Model Architecture"""

from keras.layers import Dense
from keras import Sequential

features = train_data.shape[1]

features

model = Sequential()

model.add( Dense(units=512, activation = 'relu', input_shape =(features,)))
model.add( Dense(units=256, activation = 'relu'))
model.add( Dense(units=128, activation = 'relu'))
model.add( Dense(units=64, activation = 'relu'))
model.add( Dense(units=3, activation = 'softmax'))

model.compile(optimizer = 'adam', loss= 'categorical_crossentropy', metrics = ['accuracy'])

model.summary()

model.fit(train_data, train_labels, batch_size =32, epochs = 50)

# Test Data

test_data = [] # X
test_labels = [] #Y

for category in classes:
  folder = f"images/Test/{category}"
  for img_name in os.listdir(folder):
    img_path = f"{folder}/{img_name}"

    img = image.load_img(img_path, target_size = (100,100))
    img = image.img_to_array(img)
    test_data.append(img)
    test_labels.append(category)

len(test_data)

test_data = np.array(test_data)
test_labels = np.array(test_labels)

test_data.shape

test_labels

test_labels = np.array([category2label[label] for label in test_labels])
test_labels = to_categorical(test_labels)
test_labels.shape

# test_data.shape
len(test_data)

test_data = test_data.reshape(len(test_data), 30000)
test_data.shape

model.evaluate(test_data, test_labels)

model.predict(test_data).round(3)

pred = model.predict(test_data).argmax(axis=1)

pred[:10]

[label2category[p] for p in pred]



"""Prediction for 1 image"""

test_img = "images/Test/Pikachu/2007.jpg"

img = image.load_img(test_img, target_size=(100,100))
img = image.img_to_array(img)
img.shape

plt.imshow(img.astype('int'))

img = img.reshape(1, 30000)
img.shape

pred = label2category[model.predict(img).argmax()]
pred

